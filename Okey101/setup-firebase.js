#!/usr/bin/env node

/**
 * Firebase Setup Script for Okey 101 Game
 * This script helps configure Firebase integration
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üî• Firebase Setup for Okey 101 Game');
console.log('=====================================\n');

// Check if firebase-config.js exists
const configPath = path.join(__dirname, 'firebase-config.js');
const configExists = fs.existsSync(configPath);

if (configExists) {
  console.log('‚úÖ Firebase config file already exists');
  console.log('üìÅ Location:', configPath);
  console.log('\nTo reconfigure, delete firebase-config.js and run this script again.\n');
  process.exit(0);
}

console.log('üìã Please provide your Firebase configuration details:');
console.log('(You can find these in your Firebase Console ‚Üí Project Settings ‚Üí General ‚Üí Your apps)\n');

const questions = [
  {
    name: 'apiKey',
    message: 'Firebase API Key:',
    required: true
  },
  {
    name: 'authDomain',
    message: 'Firebase Auth Domain (e.g., your-project.firebaseapp.com):',
    required: true
  },
  {
    name: 'projectId',
    message: 'Firebase Project ID:',
    required: true
  },
  {
    name: 'storageBucket',
    message: 'Firebase Storage Bucket (e.g., your-project.appspot.com):',
    required: true
  },
  {
    name: 'messagingSenderId',
    message: 'Firebase Messaging Sender ID:',
    required: true
  },
  {
    name: 'appId',
    message: 'Firebase App ID:',
    required: true
  }
];

const adminQuestions = [
  {
    name: 'privateKeyId',
    message: 'Admin SDK Private Key ID:',
    required: true
  },
  {
    name: 'privateKey',
    message: 'Admin SDK Private Key (full key with newlines):',
    required: true,
    multiline: true
  },
  {
    name: 'clientEmail',
    message: 'Admin SDK Client Email:',
    required: true
  },
  {
    name: 'clientId',
    message: 'Admin SDK Client ID:',
    required: true
  },
  {
    name: 'authUri',
    message: 'Admin SDK Auth URI (default: https://accounts.google.com/o/oauth2/auth):',
    default: 'https://accounts.google.com/o/oauth2/auth'
  },
  {
    name: 'tokenUri',
    message: 'Admin SDK Token URI (default: https://oauth2.googleapis.com/token):',
    default: 'https://oauth2.googleapis.com/token'
  },
  {
    name: 'authProviderX509CertUrl',
    message: 'Admin SDK Auth Provider X509 Cert URL (default: https://www.googleapis.com/oauth2/v1/certs):',
    default: 'https://www.googleapis.com/oauth2/v1/certs'
  },
  {
    name: 'clientX509CertUrl',
    message: 'Admin SDK Client X509 Cert URL:',
    required: true
  }
];

function askQuestion(question) {
  return new Promise((resolve) => {
    const prompt = question.default ? 
      `${question.message} (${question.default}): ` : 
      `${question.message}: `;
    
    rl.question(prompt, (answer) => {
      if (!answer && question.default) {
        answer = question.default;
      }
      resolve(answer);
    });
  });
}

async function collectAnswers(questions) {
  const answers = {};
  
  for (const question of questions) {
    let answer;
    do {
      answer = await askQuestion(question);
      if (!answer && question.required) {
        console.log('‚ùå This field is required. Please provide a value.');
      }
    } while (!answer && question.required);
    
    answers[question.name] = answer;
  }
  
  return answers;
}

async function main() {
  try {
    console.log('üîß Collecting Firebase Web App Configuration...\n');
    const webConfig = await collectAnswers(questions);
    
    console.log('\nüîß Collecting Firebase Admin SDK Configuration...\n');
    console.log('üí° You can find these in Firebase Console ‚Üí Project Settings ‚Üí Service accounts ‚Üí Generate new private key\n');
    const adminConfig = await collectAnswers(adminQuestions);
    
    // Create the config file
    const configContent = `// Firebase Configuration
// Generated by setup-firebase.js

const firebaseConfig = {
  apiKey: "${webConfig.apiKey}",
  authDomain: "${webConfig.authDomain}",
  projectId: "${webConfig.projectId}",
  storageBucket: "${webConfig.storageBucket}",
  messagingSenderId: "${webConfig.messagingSenderId}",
  appId: "${webConfig.appId}"
};

// Firebase Admin SDK Configuration (for server-side)
const adminConfig = {
  type: "service_account",
  project_id: "${webConfig.projectId}",
  private_key_id: "${adminConfig.privateKeyId}",
  private_key: "${adminConfig.privateKey.replace(/"/g, '\\"')}",
  client_email: "${adminConfig.clientEmail}",
  client_id: "${adminConfig.clientId}",
  auth_uri: "${adminConfig.authUri}",
  token_uri: "${adminConfig.tokenUri}",
  auth_provider_x509_cert_url: "${adminConfig.authProviderX509CertUrl}",
  client_x509_cert_url: "${adminConfig.clientX509CertUrl}"
};

module.exports = {
  firebaseConfig,
  adminConfig
};
`;

    fs.writeFileSync(configPath, configContent);
    
    console.log('\n‚úÖ Firebase configuration created successfully!');
    console.log('üìÅ File location:', configPath);
    console.log('\nüîí Security Note: Keep this file secure and never commit it to public repositories.');
    console.log('üí° Add firebase-config.js to your .gitignore file.');
    
    // Check if .gitignore exists and add firebase-config.js
    const gitignorePath = path.join(__dirname, '.gitignore');
    if (fs.existsSync(gitignorePath)) {
      const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
      if (!gitignoreContent.includes('firebase-config.js')) {
        fs.appendFileSync(gitignorePath, '\n# Firebase Configuration\nfirebase-config.js\n');
        console.log('‚úÖ Added firebase-config.js to .gitignore');
      }
    } else {
      fs.writeFileSync(gitignorePath, '# Firebase Configuration\nfirebase-config.js\n');
      console.log('‚úÖ Created .gitignore and added firebase-config.js');
    }
    
    console.log('\nüöÄ Next Steps:');
    console.log('1. Start your development server: npm run dev');
    console.log('2. Open your app in the browser');
    console.log('3. Look for the Firebase authentication button in the top-right corner');
    console.log('4. Test Google sign-in functionality');
    console.log('5. Check Firebase Console to verify user creation');
    
    console.log('\nüìö For more information, see FIREBASE_INTEGRATION_GUIDE.md');
    
  } catch (error) {
    console.error('‚ùå Error during setup:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
  console.log('\n\n‚ùå Setup cancelled by user');
  rl.close();
  process.exit(0);
});

main(); 